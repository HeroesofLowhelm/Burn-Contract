scilla_version 0

import PairUtils ListUtils
(***************************************************)
(*               Associated library                *)
(***************************************************)
library TokenBurner

let zero128 = Uint128 0
let zero_address = 0x1231231231231231231231231231231231231230

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint128 = @option_value Uint128

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Error events *)
type Error =
  | CodeInsufficientAmount
  | CodeNotAuthorised

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeInsufficientAmount    => Int32 -1
      | CodeNotAuthorised         => Int32 -2
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract TokenBurner

(*  Parameters *)
(
  contract_owner: ByStr20,
  contract_token: ByStr20 with contract
    field balances: Map ByStr20 Uint128
  end
)

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner()
  is_owner = builtin eq contract_owner _sender;

  match is_owner with
  | True =>
  | False =>
    err = CodeNotAuthorised;
    ThrowError err
  end
end

procedure CallTransfer(amount: Uint128)
  msg_transfer = {
    _tag: "Transfer";
    _recipient: contract_token;
    _amount: zero128;
    to: zero_address;
    amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

transition Burn()
  some_token_bal <-& contract_token.balances[_this_address];
  token_bal = option_uint128 zero128 some_token_bal;

  CallTransfer token_bal;

  e = {
    _eventname: "Burn";
    this_address: _this_address;
    burned: token_bal
  };
  event e
end

transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition BatchMintCallback()
end